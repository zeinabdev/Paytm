{"version":3,"sources":["Form.jsx","Table.jsx","App.js","serviceWorker.js","index.js"],"names":["ExpenseForm","id","align","onSubmit","this","props","handleFormSubmit","type","required","name","value","description","onChange","handleInputChange","min","step","amount","currency","currencies","map","key","className","variant","Component","ExpenseTable","console","log","receipts","slice","sum","forEach","receipt","canadian","parseInt","toFixed","isEnabled","length","striped","bordered","hover","i","disabled","onClick","App","state","event","preventDefault","push","setState","target","fetch","then","res","json","data","rates","catch","error","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d40debb8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\n\nclass ExpenseForm extends Component {\n  render() {\n    return (\n      <Card id=\"card\">\n        <h4 align=\"center\">Add a new expense:</h4>\n        <form onSubmit={this.props.handleFormSubmit}>\n          <label>Description: </label>\n          <input\n            type=\"text\"\n            required\n            name=\"description\"\n            value={this.props.description}\n            onChange={this.props.handleInputChange}\n          />\n\n          <label>Amount: </label>\n\n          <input\n            type=\"number\"\n            required\n            min=\"0\"\n            step=\"any\"\n            name=\"amount\"\n            value={this.props.amount}\n            onChange={this.props.handleInputChange}\n          />\n\n          <label>Currency: </label>\n\n          <select\n            name=\"currency\"\n            value={this.props.currency}\n            onChange={this.props.handleInputChange}\n          >\n            {this.props.currencies.map(currency => (\n              <option key={currency} value={currency}>\n                {currency}\n              </option>\n            ))}\n          </select>\n\n          <Button\n            className=\"float-right\"\n            id=\"add\"\n            type=\"submit\"\n            variant=\"outline-secondary\"\n          >\n            Add Expense\n          </Button>\n        </form>\n      </Card>\n    );\n  }\n}\n\nexport default ExpenseForm;\n","import React, { Component } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\n\nclass ExpenseTable extends Component {\n  render() {\n    const receipts = this.props.receipts;\n    let sum = 0;\n\n    receipts.forEach(receipt => {\n      receipt.canadian = parseInt(\n        (receipt.amount / receipt.currency).toFixed(2)\n      );\n\n      sum += receipt.canadian;\n    });\n\n    const isEnabled = sum < 1000;\n\n    return (\n      <div>\n        {receipts.length > 5 && <p> You have a limit of 5 receipts!</p>}\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Amount in CAD</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {receipts.slice(0, 5).map((receipt, i) => {\n              return (\n                <tr key={i}>\n                  <td>{receipt.description}</td>\n                  <td>${receipt.canadian}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n        <p>\n          <b>Total: </b> {sum}\n        </p>\n        {!isEnabled && <p> The expense report limit has been exceeded</p>}\n\n        <Button\n          id=\"submit\"\n          className=\"justify-content-md-center\"\n          disabled={!isEnabled}\n          onClick={this.onSubmit}\n          variant=\"outline-secondary\"\n        >\n          Submit Report\n        </Button>\n      </div>\n    );\n  }\n\n  onSubmit = () => {\n    console.log(this.props.receipts.slice(0, 5));\n  };\n}\n\nexport default ExpenseTable;\n","import React, { Component } from \"react\";\nimport ExpenseForm from \"./Form\";\nimport ExpenseTable from \"./Table\";\nimport \"./App.css\";\nimport Container from \"react-bootstrap/Container\";\n\nclass App extends Component {\n  state = {\n    description: \"\",\n    amount: \"\",\n    receipts: [],\n    currency: \"CAD\",\n    currencies: []\n  };\n\n  componentDidMount() {\n    fetch(\"https://api.exchangeratesapi.io/latest?base=CAD\")\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ currencies: data.rates });\n      })\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    return (\n      <Container>\n        <h2 align=\"center\"> Paytm Expense Report </h2>\n        <ExpenseForm\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n          description={this.state.description}\n          amount={this.state.amount}\n          currency={this.state.currency}\n          currencies={Object.keys(this.state.currencies)}\n        />\n        <ExpenseTable receipts={this.state.receipts} />\n      </Container>\n    );\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    let receipts = [...this.state.receipts];\n\n    receipts.push({\n      description: this.state.description,\n      amount: this.state.amount,\n      currency: this.state.currencies[this.state.currency]\n    });\n\n    this.setState({\n      receipts,\n      amount: \"\",\n      description: \"\",\n      currency: \"CAD\"\n    });\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}