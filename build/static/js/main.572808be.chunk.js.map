{"version":3,"sources":["Form.jsx","Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","id","onSubmit","this","props","handleFormSubmit","type","required","name","value","description","onChange","handleInputChange","min","step","amount","currency","currencies","map","Component","Table","console","log","receipts","sum","forEach","receipt","canadian","parseInt","toFixed","isEnabled","length","slice","disabled","onClick","App","state","event","preventDefault","push","setState","target","fetch","then","res","json","data","rates","catch","className","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAsDeA,E,iLAlDX,OACE,yBAAKC,GAAG,QACN,4DACA,0BAAMC,SAAUC,KAAKC,MAAMC,kBACzB,8CAEE,2BACEC,KAAK,OACLC,UAAQ,EACRC,KAAK,cACLC,MAAON,KAAKC,MAAMM,YAClBC,SAAUR,KAAKC,MAAMQ,qBAIzB,yCAEE,2BACEN,KAAK,SACLC,UAAQ,EACRM,IAAI,IACJC,KAAK,MACLN,KAAK,SACLC,MAAON,KAAKC,MAAMW,OAClBJ,SAAUR,KAAKC,MAAMQ,qBAIzB,2CAEE,4BACEJ,KAAK,WACLC,MAAON,KAAKC,MAAMY,SAClBL,SAAUR,KAAKC,MAAMQ,mBAEpBT,KAAKC,MAAMa,WAAWC,KAAI,SAAAF,GAAQ,OACjC,4BAAQP,MAAOO,GAAWA,QAKhC,4BAAQV,KAAK,SAASG,MAAM,UAA5B,kB,GA3CSU,aCqDJC,E,2MALblB,SAAW,WACTmB,QAAQC,IAAI,EAAKlB,MAAMmB,W,wEA/CvB,IAAMA,EAAWpB,KAAKC,MAAMmB,SACxBC,EAAM,EAEVD,EAASE,SAAQ,SAAAC,GACfA,EAAQC,SAAWC,UAChBF,EAAQX,OAASW,EAAQV,UAAUa,QAAQ,IAG9CL,GAAOE,EAAQC,YAGjB,IAAMG,EAAYN,EAAM,IAExB,OACE,6BACGD,EAASQ,OAAS,GAAK,+DACxB,+BACE,+BACE,4BACE,2CACA,uCAGDR,EAASS,MAAM,EAAG,GAAGd,KAAI,SAAAQ,GACxB,OACE,6BACE,4BACE,4BAAKA,EAAQhB,aACb,4BAAKgB,EAAQC,WAEf,mCAMTH,GAECM,GAAa,0EACf,4BAAQG,UAAWH,EAAWI,QAAS/B,KAAKD,UAA5C,e,GAzCYiB,aC8DLgB,G,iNA1DbC,MAAQ,CACN1B,YAAa,GACbK,OAAQ,GACRQ,SAAU,GACVP,SAAU,MACVC,WAAY,I,EA4BdZ,iBAAmB,SAAAgC,GACjBA,EAAMC,iBAEN,IAAIf,EAAQ,YAAO,EAAKa,MAAMb,UAE9BA,EAASgB,KAAK,CACZ7B,YAAa,EAAK0B,MAAM1B,YACxBK,OAAQ,EAAKqB,MAAMrB,OACnBC,SAAU,EAAKoB,MAAMnB,WAAW,EAAKmB,MAAMpB,YAG7C,EAAKwB,SAAS,CACZjB,WACAR,OAAQ,GACRL,YAAa,GACbM,SAAU,S,EAIdJ,kBAAoB,SAAAyB,GAAU,IAAD,EACHA,EAAMI,OAAtBjC,EADmB,EACnBA,KAAMC,EADa,EACbA,MACd,EAAK+B,SAAL,eAAiBhC,EAAOC,K,mFA9CL,IAAD,OAClBiC,MAAM,mDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKN,SAAS,CAAEvB,WAAY6B,EAAKC,WAElCC,MAAM3B,QAAQC,IAAI,Y,+BAIrB,OACE,yBAAK2B,UAAU,OACb,kBAAC,EAAD,CACE5C,iBAAkBF,KAAKE,iBACvBO,kBAAmBT,KAAKS,kBACxBF,YAAaP,KAAKiC,MAAM1B,YACxBK,OAAQZ,KAAKiC,MAAMrB,OACnBC,SAAUb,KAAKiC,MAAMpB,SACrBC,WAAYiC,OAAOC,KAAKhD,KAAKiC,MAAMnB,cAErC,kBAAC,EAAD,CAAOM,SAAUpB,KAAKiC,MAAMb,gB,GA7BlBJ,cCOEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.572808be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Form extends Component {\n  render() {\n    return (\n      <div id=\"Form\">\n        <h3>Add a new item to the table:</h3>\n        <form onSubmit={this.props.handleFormSubmit}>\n          <label>\n            Description:\n            <input\n              type=\"text\"\n              required\n              name=\"description\"\n              value={this.props.description}\n              onChange={this.props.handleInputChange}\n            />\n          </label>\n\n          <label>\n            Amount:\n            <input\n              type=\"number\"\n              required\n              min=\"0\"\n              step=\"any\"\n              name=\"amount\"\n              value={this.props.amount}\n              onChange={this.props.handleInputChange}\n            />\n          </label>\n\n          <label>\n            Currency:\n            <select\n              name=\"currency\"\n              value={this.props.currency}\n              onChange={this.props.handleInputChange}\n            >\n              {this.props.currencies.map(currency => (\n                <option value={currency}>{currency}</option>\n              ))}\n            </select>\n          </label>\n\n          <button type=\"submit\" value=\"Submit\">\n            Add Item\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\n\nclass Table extends Component {\n  render() {\n    const receipts = this.props.receipts;\n    let sum = 0;\n\n    receipts.forEach(receipt => {\n      receipt.canadian = parseInt(\n        (receipt.amount / receipt.currency).toFixed(2)\n      );\n\n      sum += receipt.canadian;\n    });\n\n    const isEnabled = sum < 1000;\n\n    return (\n      <div>\n        {receipts.length > 5 && <p> You have a limit of 5 receipts!</p>}\n        <table>\n          <tbody>\n            <tr>\n              <th>Description</th>\n              <th>Amount</th>\n            </tr>\n\n            {receipts.slice(0, 5).map(receipt => {\n              return (\n                <div>\n                  <tr>\n                    <td>{receipt.description}</td>\n                    <td>{receipt.canadian}</td>\n                  </tr>\n                  <tr></tr>\n                </div>\n              );\n            })}\n          </tbody>\n        </table>\n        {sum}\n\n        {!isEnabled && <p> The expense report limit has been exceeded</p>}\n        <button disabled={!isEnabled} onClick={this.onSubmit}>\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  onSubmit = () => {\n    console.log(this.props.receipts);\n  };\n}\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport Table from \"./Table\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    description: \"\",\n    amount: \"\",\n    receipts: [],\n    currency: \"CAD\",\n    currencies: []\n  };\n\n  componentDidMount() {\n    fetch(\"https://api.exchangeratesapi.io/latest?base=CAD\")\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ currencies: data.rates });\n      })\n      .catch(console.log(\"error\"));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n          description={this.state.description}\n          amount={this.state.amount}\n          currency={this.state.currency}\n          currencies={Object.keys(this.state.currencies)}\n        />\n        <Table receipts={this.state.receipts} />\n      </div>\n    );\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    let receipts = [...this.state.receipts];\n\n    receipts.push({\n      description: this.state.description,\n      amount: this.state.amount,\n      currency: this.state.currencies[this.state.currency]\n    });\n\n    this.setState({\n      receipts,\n      amount: \"\",\n      description: \"\",\n      currency: \"CAD\"\n    });\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}